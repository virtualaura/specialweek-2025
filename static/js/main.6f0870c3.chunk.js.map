{"version":3,"sources":["ScheduleDisplay.js","SpecialWeekTodos.js","App.js","index.js"],"names":["calculateHeight","start","end","startTime","Date","getTime","getBlockColor","event","Workshop","Gouter","Lunch","Team Meeting","Keynote","Hackathon","Pitch Event","ScheduleDisplay","_ref","schedule","groupedSchedule","reduce","acc","block","date","push","groupByDate","dates","Object","keys","React","createElement","style","display","gap","justifyContent","map","day","key","flex","minWidth","padding","border","textAlign","marginBottom","position","height","background","index","top","width","backgroundColor","borderRadius","color","boxSizing","fontSize","className","time","location","getUniqueNames","tasks","names","Set","forEach","task","who","name","add","trim","cc","split","SpecialWeekTodos","setTasks","useState","setSchedule","filter","setFilter","setNames","useEffect","async","response","fetch","process","text","Papa","parse","header","skipEmptyLines","delimiter","complete","result","formattedTasks","data","due_date","formatDate","sort","a","b","fetchTasks","formattedSchedule","row","formattedDate","find","blocks","fetchSchedule","dateStr","toLocaleDateString","year","month","filteredTasks","includes","id","onClick","todo","disabled","type","checked","status","description","join","notes","App","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.6f0870c3.chunk.js","sourcesContent":["import React from \"react\";\n\n  // Helper function to calculate the duration of an event\nconst calculateHeight = (start, end) => {\n    const startTime = new Date(`1970-01-01T${start}:00Z`).getTime();\n    const endTime = new Date(`1970-01-01T${end}:00Z`).getTime();\n    const duration = (endTime - startTime) / (1000 * 60 * 60); // Duration in hours\n    return duration * 15; // Adjusted scale factor\n};\n\n  // Organize schedule data into grouped columns by \"date\"\nconst groupByDate = (schedule) => {\n  return schedule.reduce((acc, block) => {\n    if (!acc[block.date]) {\n      acc[block.date] = [];\n    }\n    acc[block.date].push(block);\n    return acc;\n  }, {});\n};\n\nconst ScheduleDisplay = ({ schedule }) => {\n  const groupedSchedule = groupByDate(schedule);\n  const dates = Object.keys(groupedSchedule);\n\n  return (\n    <div style={{ display: \"flex\", gap: \"10px\", justifyContent: \"center\" }}>\n      {/* Render each date as a column */}\n      {dates.map((day) => (\n        <div key={day} style={{ flex: 1, minWidth: \"150px\", padding: \"10px\", border: \"1px solid #ccc\" }}>\n          <h3 style={{ textAlign: \"center\", marginBottom: \"10px\" }}>{day}</h3>\n          <div style={{ position: \"relative\", height: \"400px\", background: \"#f9f9f9\", padding: \"5px\" }}>\n            {groupedSchedule[day].map((block, index) => (\n              <div\n                key={index}\n                style={{\n                  position: \"absolute\",\n                  top: calculateHeight(\"00:00\", block.start), // Position based on start time\n                  height: calculateHeight(block.start, block.end), // Height scaled\n                  width: \"100%\",\n                  padding: \"5px\",\n                  backgroundColor: getBlockColor(block.event),\n                  borderRadius: \"5px\",\n                  color: \"white\",\n                  boxSizing: \"border-box\",\n                  textAlign: \"center\",\n                  fontSize: \"12px\",\n                }}\n              >\n                <div className=\"font-semibold\">{block.event}</div>\n                <div className=\"text-sm\">{block.time}</div>\n                <div className=\"text-xs\">{block.location}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\n// Assign colors to event types\nconst getBlockColor = (event) => {\n  const colors = {\n    Workshop: \"#3498db\",\n    Gouter: \"#f1c40f\",\n    Lunch: \"#e67e22\",\n    \"Team Meeting\": \"#2ecc71\",\n    Keynote: \"#9b59b6\",\n    Hackathon: \"#e74c3c\",\n    \"Pitch Event\": \"#16a085\",\n  };\n  return colors[event] || \"#bdc3c7\";\n};\n\nexport default ScheduleDisplay;","import React, { useState, useEffect } from \"react\";\nimport Papa from \"papaparse\";\nimport ScheduleDisplay from \"./ScheduleDisplay\";\n\n// Helper function to extract unique names from the 'who' and 'cc' fields\nconst getUniqueNames = (tasks) => {\n  const names = new Set();\n  tasks.forEach((task) => {\n    if (task.who) {\n      task.who.forEach((name) => names.add(name.trim())); // Add each unique 'who' name\n    }\n    if (task.cc) {\n      task.cc.split(\";\").forEach((name) => names.add(name.trim())); // Add each unique 'cc' name\n    }\n  });\n  return [...names];\n};\n\nexport default function SpecialWeekTodos() {\n  const [tasks, setTasks] = useState([]);\n  const [schedule, setSchedule] = useState([]);\n  const [filter, setFilter] = useState(null);\n  const [names, setNames] = useState([]);\n\n  useEffect(() => {\n    // Fetch and parse tasks CSV\n    async function fetchTasks() {\n      const response = await fetch(process.env.PUBLIC_URL + \"/tasks.csv\");\n      const text = await response.text();\n      Papa.parse(text, {\n        header: true,\n        skipEmptyLines: true,\n        delimiter: \",\",\n        complete: (result) => {\n          const formattedTasks = result.data.map((task) => ({\n            ...task,\n            who: task.who.split(\";\"),\n            due_date: formatDate(task.due_date),  // Format the date\n          }));\n          setTasks(formattedTasks.sort((a, b) => new Date(a.due_date) - new Date(b.due_date))); // Sort tasks by date\n          setNames(getUniqueNames(formattedTasks)); // Extract unique names for the filter buttons\n        },\n      });\n    }\n\n    // Fetch and parse schedule CSV\n    async function fetchSchedule() {\n      const response = await fetch(process.env.PUBLIC_URL + \"/schedule.csv\");\n      const text = await response.text();\n      Papa.parse(text, {\n        header: true,\n        skipEmptyLines: true,\n        delimiter: \",\",\n        complete: (result) => {\n          const formattedSchedule = result.data.reduce((acc, row) => {\n            const { date, time, start, end, event, location } = row;\n\n            // Format date and time\n            const formattedDate = formatDate(date);\n            let day = acc.find((day) => day.date === formattedDate);\n            if (!day) {\n              day = { date: formattedDate, blocks: [] };\n              acc.push(day);\n            }\n\n            day.blocks.push({ time, start, end, event, location });\n\n            return acc;\n          }, []);\n          \n          setSchedule(formattedSchedule);  // Set the schedule state here\n        },\n      });\n    }\n\n    fetchTasks();\n    fetchSchedule();\n  }, []);\n\n  // Helper function to format dates\n  const formatDate = (dateStr) => {\n    const date = new Date(dateStr);\n    const options = { year: 'numeric', month: 'long', day: 'numeric' };\n    return date.toLocaleDateString('en-GB', options); // Format as \"30 April 2025\"\n  };\n\n  // Filter tasks based on the selected filter\n  const filteredTasks = filter ? tasks.filter((task) => task.who.includes(filter)) : tasks;\n\n  return (\n    <div className=\"p-4 max-w-lg mx-auto\">\n      <h1 className=\"text-xl font-bold mb-4\">Special Week 2025 - Plan and To-Dos</h1>\n      <h3>\n        Below please find details for Special Week 2025 planning. In the first block, you'll see the calendar for\n        the week. The second section has the to-dos that need to be completed for the week. By clicking on your name,\n        you'll see the information that is relevant for you - either because your feedback is needed, or on an FYI\n        basis.\n      </h3>\n\n      {/* Schedule block */}\n      <div id=\"schedule-block\" className=\"my-6\">\n        <ScheduleDisplay schedule={schedule} /> {/* Pass the schedule to ScheduleDisplay */}\n      </div>\n\n      {/* Dynamic Filter buttons */}\n      <div className=\"mb-4\">\n        <button className=\"mr-2 px-3 py-1 bg-blue-500 text-white rounded\" onClick={() => setFilter(null)}>\n          All\n        </button>\n        {names.map((name) => (\n          <button\n            key={name}\n            className=\"mr-2 px-3 py-1 bg-gray-500 text-white rounded\"\n            onClick={() => setFilter(name)}\n          >\n            {name}\n          </button>\n        ))}\n      </div>\n\n      {/* Todo list */}\n      <ul className=\"list-none space-y-4\">\n        {filteredTasks.map((todo) => (\n          <li key={todo.id} className=\"p-4 bg-white shadow-md rounded-lg border border-gray-200\">\n            <div className=\"flex items-center\">\n              {/* Checkbox and Description on the same line */}\n              <input\n                disabled\n                className=\"mr-3 h-5 w-5 text-blue-500 border-gray-300 rounded\"\n                type=\"checkbox\"\n                checked={todo.status === \"done\"}\n              />\n              <span className={`font-semibold text-lg ${todo.status === \"done\" ? \"line-through text-gray-400\" : \"text-gray-900\"}`}>\n                &nbsp;{todo.description}\n              </span>\n            </div>\n            <div className=\"mt-2 ml-8 text-gray-700 text-sm space-y-1\">\n              {/* Date, Who, Notes */}\n              <div className=\"todo-detail\">\n                <span className=\"font-semibold text-gray-900\">📅</span> {todo.due_date}\n              </div>\n              <div className=\"todo-detail\">\n                <span className=\"font-semibold text-gray-900\">👤</span> \n                {todo.who ? todo.who.join(\" \") : \"\"} {/* Add space between names */}\n              </div>\n              {todo.cc && (\n                <div className=\"todo-detail\">\n                  <span className=\"font-semibold text-gray-900\">📢 </span> {todo.cc ? todo.cc.split(\";\").join(\" \") : \"\"}\n                </div>\n              )}\n              {todo.notes && <div className=\"todo-detail italic text-gray-600\">📝 {todo.notes}</div>}\n            </div>\n            <div><span>&nbsp;</span></div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport SpecialWeekTodos from \"./SpecialWeekTodos\"; // Import the SpecialWeekTodos component\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div>\n      {/* Special Week Todos Component */}\n      <SpecialWeekTodos />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\nimport './index.css';  //\nimport './SpecialWeek.css';  //\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(<App />);\n"],"sourceRoot":""}