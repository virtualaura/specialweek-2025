{"version":3,"sources":["ScheduleDisplay.js","SpecialWeekTodos.js","App.js","index.js"],"names":["ScheduleDisplay","_ref","schedule","React","createElement","className","length","map","day","key","date","blocks","block","index","start","end","duration","getBlockDuration","parseTime","time","hours","minutes","split","Number","startTimeInMinutes","blockColor","includes","getBlockColor","style","height","event","location","who","join","cc","getUniqueNames","tasks","names","Set","forEach","task","name","add","trim","SpecialWeekTodos","setTasks","useState","setSchedule","filter","setFilter","setNames","useEffect","async","response","fetch","process","text","Papa","parse","header","skipEmptyLines","delimiter","complete","result","formattedTasks","data","due_date","formatDate","sort","a","b","Date","fetchTasks","formattedSchedule","reduce","acc","row","formattedDate","find","push","fetchSchedule","dateStr","toLocaleDateString","year","month","filteredTasks","id","onClick","todo","disabled","type","checked","status","description","notes","App","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.30f30049.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'; // Add this import line at the top\n\n// Helper function to parse and calculate block duration\nconst getBlockDuration = (start, end) => {\n  const parseTime = (time) => {\n    const [hours, minutes] = time.split(\":\").map(Number);\n    return hours * 60 + minutes; // convert time to total minutes\n  };\n\n  const startTimeInMinutes = parseTime(start);\n  const endTimeInMinutes = parseTime(end);\n\n  return (endTimeInMinutes - startTimeInMinutes) / 60; // return duration in hours\n};\n\n// Helper function to get block color based on the time of day\nconst getBlockColor = (time) => {\n  if (time.includes(\"Morning\")) return \"bg-blue-500\";\n  if (time.includes(\"Afternoon\")) return \"bg-green-500\";\n  if (time.includes(\"Lunch\")) return \"bg-yellow-500\";\n  if (time.includes(\"Gouter\")) return \"bg-yellow-100\";\n  if (time.includes(\"Evening\")) return \"bg-red-500\";\n  return \"bg-gray-300\"; // Default color\n};\n\nconst ScheduleDisplay = ({ schedule }) => {\n  return (\n    <div className=\"flex flex-wrap\">\n      {/* Schedule Display */}\n      {schedule && schedule.length > 0 ? (\n        schedule.map((day) => (\n          <div\n            key={day.date}\n            className=\"schedule-day flex flex-col w-1/4 p-2\" // Each day takes 1/4 of the width\n          >\n            <div className=\"schedule-day-name font-semibold text-xl\">{day.date}</div>\n            <div className=\"schedule-bars flex flex-col\">\n              {day.blocks && day.blocks.length > 0 ? (\n                day.blocks.map((block, index) => {\n                  // Ensure block.start and block.end are defined before processing\n                  if (!block.start || !block.end) return null;\n\n                  // Calculate block duration in hours\n                  const duration = getBlockDuration(block.start, block.end);\n                  const blockColor = getBlockColor(block.time);\n\n                  return (\n                    <div\n                      key={index}\n                      className={`schedule-block ${blockColor} p-2 my-1 rounded`}\n                      style={{\n                        height: `${duration * 100}px`, // Set height based on duration (scaled)\n                      }}\n                    >\n                      <div className=\"font-semibold text-white\">{block.event}</div>\n                      <div className=\"text-sm text-white\">{block.time}</div>\n                      <div className=\"text-xs text-white\">{block.location}</div>\n                      <div className=\"text-xs text-white\">\n                        {block.who && block.who.split(\";\").join(\", \")}\n                      </div>\n                      <div className=\"text-xs text-white\">\n                        {block.cc && block.cc.split(\";\").join(\", \")}\n                      </div>\n                    </div>\n                  );\n                })\n              ) : (\n                <div>No blocks available for this day</div>\n              )}\n            </div>\n          </div>\n        ))\n      ) : (\n        <div>No schedule data available</div>\n      )}\n    </div>\n  );\n};\n\nexport default ScheduleDisplay;","import React, { useState, useEffect } from \"react\";\nimport Papa from \"papaparse\";\nimport ScheduleDisplay from \"./ScheduleDisplay\";\n\n// Helper function to extract unique names from the 'who' and 'cc' fields\nconst getUniqueNames = (tasks) => {\n  const names = new Set();\n  tasks.forEach((task) => {\n    if (task.who) {\n      task.who.forEach((name) => names.add(name.trim())); // Add each unique 'who' name\n    }\n    if (task.cc) {\n      task.cc.split(\";\").forEach((name) => names.add(name.trim())); // Add each unique 'cc' name\n    }\n  });\n  return [...names];\n};\n\nexport default function SpecialWeekTodos() {\n  const [tasks, setTasks] = useState([]);\n  const [schedule, setSchedule] = useState([]);\n  const [filter, setFilter] = useState(null);\n  const [names, setNames] = useState([]);\n\n  useEffect(() => {\n    // Fetch and parse tasks CSV\n    async function fetchTasks() {\n      const response = await fetch(process.env.PUBLIC_URL + \"/tasks.csv\");\n      const text = await response.text();\n      Papa.parse(text, {\n        header: true,\n        skipEmptyLines: true,\n        delimiter: \",\",\n        complete: (result) => {\n          const formattedTasks = result.data.map((task) => ({\n            ...task,\n            who: task.who.split(\";\"),\n            due_date: formatDate(task.due_date),  // Format the date\n          }));\n          setTasks(formattedTasks.sort((a, b) => new Date(a.due_date) - new Date(b.due_date))); // Sort tasks by date\n          setNames(getUniqueNames(formattedTasks)); // Extract unique names for the filter buttons\n        },\n      });\n    }\n\n    // Fetch and parse schedule CSV\n    async function fetchSchedule() {\n      const response = await fetch(process.env.PUBLIC_URL + \"/schedule.csv\");\n      const text = await response.text();\n      Papa.parse(text, {\n        header: true,\n        skipEmptyLines: true,\n        delimiter: \",\",\n        complete: (result) => {\n          const formattedSchedule = result.data.reduce((acc, row) => {\n            const { date, time, start, end, event, location } = row;\n\n            // Format date and time\n            const formattedDate = formatDate(date);\n            let day = acc.find((day) => day.date === formattedDate);\n            if (!day) {\n              day = { date: formattedDate, blocks: [] };\n              acc.push(day);\n            }\n\n            day.blocks.push({ time, start, end, event, location });\n\n            return acc;\n          }, []);\n          \n          setSchedule(formattedSchedule);  // Set the schedule state here\n        },\n      });\n    }\n\n    fetchTasks();\n    fetchSchedule();\n  }, []);\n\n  // Helper function to format dates\n  const formatDate = (dateStr) => {\n    const date = new Date(dateStr);\n    const options = { year: 'numeric', month: 'long', day: 'numeric' };\n    return date.toLocaleDateString('en-GB', options); // Format as \"30 April 2025\"\n  };\n\n  // Filter tasks based on the selected filter\n  const filteredTasks = filter ? tasks.filter((task) => task.who.includes(filter)) : tasks;\n\n  return (\n    <div className=\"p-4 max-w-lg mx-auto\">\n      <h1 className=\"text-xl font-bold mb-4\">Special Week 2025 - Plan and To-Dos</h1>\n      <h3>\n        Below please find details for Special Week 2025 planning. In the first block, you'll see the calendar for\n        the week. The second section has the to-dos that need to be completed for the week. By clicking on your name,\n        you'll see the information that is relevant for you - either because your feedback is needed, or on an FYI\n        basis.\n      </h3>\n\n      {/* Schedule block */}\n      <div id=\"schedule-block\" className=\"my-6\">\n        <ScheduleDisplay schedule={schedule} /> {/* Pass the schedule to ScheduleDisplay */}\n      </div>\n\n      {/* Dynamic Filter buttons */}\n      <div className=\"mb-4\">\n        <button className=\"mr-2 px-3 py-1 bg-blue-500 text-white rounded\" onClick={() => setFilter(null)}>\n          All\n        </button>\n        {names.map((name) => (\n          <button\n            key={name}\n            className=\"mr-2 px-3 py-1 bg-gray-500 text-white rounded\"\n            onClick={() => setFilter(name)}\n          >\n            {name}\n          </button>\n        ))}\n      </div>\n\n      {/* Todo list */}\n      <ul className=\"list-none space-y-4\">\n        {filteredTasks.map((todo) => (\n          <li key={todo.id} className=\"p-4 bg-white shadow-md rounded-lg border border-gray-200\">\n            <div className=\"flex items-center\">\n              {/* Checkbox and Description on the same line */}\n              <input\n                disabled\n                className=\"mr-3 h-5 w-5 text-blue-500 border-gray-300 rounded\"\n                type=\"checkbox\"\n                checked={todo.status === \"done\"}\n              />\n              <span className={`font-semibold text-lg ${todo.status === \"done\" ? \"line-through text-gray-400\" : \"text-gray-900\"}`}>\n                &nbsp;{todo.description}\n              </span>\n            </div>\n            <div className=\"mt-2 ml-8 text-gray-700 text-sm space-y-1\">\n              {/* Date, Who, Notes */}\n              <div className=\"todo-detail\">\n                <span className=\"font-semibold text-gray-900\">📅</span> {todo.due_date}\n              </div>\n              <div className=\"todo-detail\">\n                <span className=\"font-semibold text-gray-900\">👤</span> \n                {todo.who ? todo.who.join(\" \") : \"\"} {/* Add space between names */}\n              </div>\n              {todo.cc && (\n                <div className=\"todo-detail\">\n                  <span className=\"font-semibold text-gray-900\">📢 </span> {todo.cc ? todo.cc.split(\";\").join(\" \") : \"\"}\n                </div>\n              )}\n              {todo.notes && <div className=\"todo-detail italic text-gray-600\">📝 {todo.notes}</div>}\n            </div>\n            <div><span>&nbsp;</span></div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport SpecialWeekTodos from \"./SpecialWeekTodos\"; // Import the SpecialWeekTodos component\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div>\n      {/* Special Week Todos Component */}\n      <SpecialWeekTodos />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\nimport './index.css';  //\nimport './SpecialWeek.css';  //\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(<App />);\n"],"sourceRoot":""}