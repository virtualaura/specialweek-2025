{"version":3,"sources":["ScheduleDisplay.js","SpecialWeekTodos.js","App.js","index.js"],"names":["ScheduleDisplay","_ref","schedule","React","createElement","className","length","map","day","key","date","blocks","block","index","duration","getBlockDuration","start","end","startHour","startMinute","split","Number","endHour","endMinute","blockColor","time","includes","getBlockColor","style","width","event","location","SpecialWeekTodos","tasks","setTasks","useState","setSchedule","filter","setFilter","useEffect","async","response","fetch","process","text","Papa","parse","header","skipEmptyLines","delimiter","complete","result","formattedTasks","data","task","who","due_date","formatDate","sort","a","b","Date","fetchTasks","formattedSchedule","reduce","acc","row","formattedDate","find","push","fetchSchedule","dateStr","toLocaleDateString","year","month","filteredTasks","id","onClick","todo","disabled","type","checked","status","description","join","cc","notes","App","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.01372d06.chunk.js","sourcesContent":["import React from \"react\";\n\n// Helper function to calculate block duration in hours\nconst getBlockDuration = (start, end) => {\n  const [startHour, startMinute] = start.split(\":\").map(Number);\n  const [endHour, endMinute] = end.split(\":\").map(Number);\n\n  // Convert start and end times to minutes\n  const startTimeInMinutes = startHour * 60 + startMinute;\n  const endTimeInMinutes = endHour * 60 + endMinute;\n\n  // Calculate the duration in minutes\n  const durationInMinutes = endTimeInMinutes - startTimeInMinutes;\n\n  // Return the duration in hours (for block width)\n  return durationInMinutes / 60; // Convert minutes to hours\n};\n\n  // Helper function to get block color based on the time of day\n  const getBlockColor = (time) => {\n    if (time.includes(\"Morning\")) return \"bg-blue-500\";\n    if (time.includes(\"Afternoon\")) return \"bg-green-500\";\n    if (time.includes(\"Lunch\")) return \"bg-yellow-500\";\n    if (time.includes(\"Gouter\")) return \"bg-yellow-100\";\n    if (time.includes(\"Evening\")) return \"bg-red-500\";\n    return \"bg-gray-300\"; // Default color\n  };\n\n  const ScheduleDisplay = ({ schedule }) => {\n    return (\n      <div className=\"schedule-container\">\n        {schedule && schedule.length > 0 ? (\n          schedule.map((day) => (\n            <div key={day.date} className=\"schedule-day\">\n              <div className=\"schedule-day-name\">{day.date}</div>\n              <div className=\"schedule-bars\">\n                {day.blocks && day.blocks.length > 0 ? (\n                  day.blocks.map((block, index) => {\n                    // Calculate block duration in hours\n                    const duration = getBlockDuration(block.start, block.end);\n                    const blockColor = getBlockColor(block.time);\n  \n                    return (\n                      <div\n                        key={index}\n                        className={`schedule-block ${blockColor} p-2 my-1 rounded`}\n                        style={{ width: `${duration * 100}px` }} // Width is based on duration\n                      >\n                        <div className=\"font-semibold text-white\">{block.event}</div>\n                        <div className=\"text-sm text-white\">{block.time}</div>\n                        <div className=\"text-xs text-white\">{block.location}</div>\n                      </div>\n                    );\n                  })\n                ) : (\n                  <div>No blocks available for this day</div>\n                )}\n              </div>\n            </div>\n          ))\n        ) : (\n          <div>No schedule data available</div>\n        )}\n      </div>\n    );\n  };\n  \n  export default ScheduleDisplay;","import React, { useState, useEffect } from \"react\";\nimport Papa from \"papaparse\";\nimport ScheduleDisplay from \"./ScheduleDisplay\";\n\nexport default function SpecialWeekTodos() {\n  const [tasks, setTasks] = useState([]);\n  const [schedule, setSchedule] = useState([]);\n  const [filter, setFilter] = useState(null);\n\n  useEffect(() => {\n    // Fetch and parse tasks CSV\n    async function fetchTasks() {\n      const response = await fetch(process.env.PUBLIC_URL + \"/tasks.csv\");\n      const text = await response.text();\n      Papa.parse(text, {\n        header: true,\n        skipEmptyLines: true,\n        delimiter: \",\",\n        complete: (result) => {\n          const formattedTasks = result.data.map((task) => ({\n            ...task,\n            who: task.who.split(\";\"),\n            due_date: formatDate(task.due_date),  // Format the date\n          }));\n          setTasks(formattedTasks.sort((a, b) => new Date(a.due_date) - new Date(b.due_date))); // Sort tasks by date\n        },\n      });\n    }\n\n    // Fetch and parse schedule CSV\n    async function fetchSchedule() {\n      const response = await fetch(process.env.PUBLIC_URL + \"/schedule.csv\");\n      const text = await response.text();\n      Papa.parse(text, {\n        header: true,\n        skipEmptyLines: true,\n        delimiter: \",\",\n        complete: (result) => {\n          const formattedSchedule = result.data.reduce((acc, row) => {\n            const { date, time, start, end, event, location } = row;\n\n            // Format date and time\n            const formattedDate = formatDate(date);\n            let day = acc.find((day) => day.date === formattedDate);\n            if (!day) {\n              day = { date: formattedDate, blocks: [] };\n              acc.push(day);\n            }\n\n            day.blocks.push({ time, start, end, event, location });\n\n            return acc;\n          }, []);\n          \n          setSchedule(formattedSchedule);  // Set the schedule state here\n        },\n      });\n    }\n\n    fetchTasks();\n    fetchSchedule();\n  }, []);\n\n  // Helper function to format dates\n  const formatDate = (dateStr) => {\n    const date = new Date(dateStr);\n    const options = { year: 'numeric', month: 'long', day: 'numeric' };\n    return date.toLocaleDateString('en-GB', options); // Format as \"30 April 2025\"\n  };\n\n  const filteredTasks = filter ? tasks.filter((task) => task.who.includes(filter)) : tasks;\n\n  return (\n    <div className=\"p-4 max-w-lg mx-auto\">\n      <h1 className=\"text-xl font-bold mb-4\">Special Week 2025 - Plan and To-Dos</h1>\n      <h3>\n        Below please find details for Special Week 2025 planning. In the first block, you'll see the calendar for\n        the week. The second section has the to-dos that need to be completed for the week. By clicking on your name,\n        you'll see the information that is relevant for you - either because your feedback is needed, or on an FYI\n        basis.\n      </h3>\n\n      {/* Schedule block */}\n      <div id=\"schedule-block\" className=\"my-6\">\n        <ScheduleDisplay schedule={schedule} /> {/* Pass the schedule to ScheduleDisplay */}\n      </div>\n\n      {/* Filter buttons */}\n      <div className=\"mb-4\">\n        <button className=\"mr-2 px-3 py-1 bg-blue-500 text-white rounded\" onClick={() => setFilter(null)}>\n          All\n        </button>\n        <button className=\"mr-2 px-3 py-1 bg-gray-500 text-white rounded\" onClick={() => setFilter(\"Kim\")}>\n          Kim\n        </button>\n        <button className=\"px-3 py-1 bg-gray-500 text-white rounded\" onClick={() => setFilter(\"Julia\")}>\n          Julia\n        </button>\n      </div>\n\n      {/* Todo list */}\n      <ul className=\"list-none space-y-4\">\n        {filteredTasks.map((todo) => (\n          <li key={todo.id} className=\"p-4 bg-white shadow-md rounded-lg border border-gray-200\">\n            <div className=\"flex items-center\">\n              {/* Checkbox and Description on the same line */}\n              <input\n                disabled\n                className=\"mr-3 h-5 w-5 text-blue-500 border-gray-300 rounded\"\n                type=\"checkbox\"\n                checked={todo.status === \"done\"}\n              />\n              <span className={`font-semibold text-lg ${todo.status === \"done\" ? \"line-through text-gray-400\" : \"text-gray-900\"}`}>\n                {todo.description}\n              </span>\n            </div>\n            <div className=\"mt-2 ml-8 text-gray-700 text-sm space-y-1\">\n              {/* Date, Who, Notes */}\n              <div>\n                <span className=\"font-semibold text-gray-900\">📅</span> {todo.due_date}\n              </div>\n              <div>\n                <span className=\"font-semibold text-gray-900\">👤</span> \n                {todo.who ? todo.who.join(\" \") : \"\"} {/* Add space between names */}\n              </div>\n              {todo.cc && (\n                <div>\n                  <span className=\"font-semibold text-gray-900\">📢 For Info:</span> {todo.cc ? todo.cc.split(\";\").join(\" \") : \"\"}\n                </div>\n              )}\n              {todo.notes && <div className=\"italic text-gray-600\">📝 {todo.notes}</div>}\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport SpecialWeekTodos from \"./SpecialWeekTodos\"; // Import the SpecialWeekTodos component\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div>\n      {/* Special Week Todos Component */}\n      <SpecialWeekTodos />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(<App />);\n"],"sourceRoot":""}