{"version":3,"sources":["ScheduleDisplay.js","SpecialWeekTodos.js","App.js","index.js"],"names":["ScheduleDisplay","_ref","schedule","filter","setFilter","useState","filteredSchedule","setFilteredSchedule","useEffect","day","blocks","some","block","who","includes","cc","React","createElement","className","names","forEach","push","split","Set","getUniqueNames","map","name","key","onClick","length","date","index","start","end","duration","getBlockDuration","parseTime","time","hours","minutes","Number","startTimeInMinutes","blockColor","getBlockColor","style","width","marginBottom","event","location","join","tasks","task","add","trim","SpecialWeekTodos","setTasks","setSchedule","setNames","async","response","fetch","process","text","Papa","parse","header","skipEmptyLines","delimiter","complete","result","formattedTasks","data","due_date","formatDate","sort","a","b","Date","fetchTasks","formattedSchedule","reduce","acc","row","formattedDate","find","fetchSchedule","dateStr","toLocaleDateString","year","month","filteredTasks","id","todo","disabled","type","checked","status","description","notes","App","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.257999a3.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'; // Add this import line at the top\n\n// Helper function to parse and calculate block duration\nconst getBlockDuration = (start, end) => {\n  const parseTime = (time) => {\n    const [hours, minutes] = time.split(\":\").map(Number);\n    return hours * 60 + minutes; // convert time to total minutes\n  };\n\n  const startTimeInMinutes = parseTime(start);\n  const endTimeInMinutes = parseTime(end);\n\n  return (endTimeInMinutes - startTimeInMinutes) / 60; // return duration in hours\n};\n\n// Helper function to get block color based on the time of day\nconst getBlockColor = (time) => {\n  if (time.includes(\"Morning\")) return \"bg-blue-500\";\n  if (time.includes(\"Afternoon\")) return \"bg-green-500\";\n  if (time.includes(\"Lunch\")) return \"bg-yellow-500\";\n  if (time.includes(\"Gouter\")) return \"bg-yellow-100\";\n  if (time.includes(\"Evening\")) return \"bg-red-500\";\n  return \"bg-gray-300\"; // Default color\n};\n\nconst ScheduleDisplay = ({ schedule }) => {\n  const [filter, setFilter] = useState(\"\");\n  const [filteredSchedule, setFilteredSchedule] = useState(schedule);\n  \n  useEffect(() => {\n    // Filter schedule based on the selected filter (e.g., name)\n    if (filter) {\n      setFilteredSchedule(\n        schedule.filter((day) =>\n          day.blocks.some(\n            (block) =>\n              (block.who && block.who.includes(filter)) || (block.cc && block.cc.includes(filter))\n          )\n        )\n      );\n    } else {\n      setFilteredSchedule(schedule); // Reset to original schedule if no filter\n    }\n  }, [filter, schedule]);\n\n  // Get unique names from the who and cc fields to generate filter buttons\n  const getUniqueNames = (schedule) => {\n    const names = [];\n    schedule.forEach((day) => {\n      day.blocks.forEach((block) => {\n        if (block.who) {\n          names.push(...block.who.split(\";\"));\n        }\n        if (block.cc) {\n          names.push(...block.cc.split(\";\"));\n        }\n      });\n    });\n    return [...new Set(names)];\n  };\n\n  return (\n    <div>\n      {/* Filter buttons */}\n      <div className=\"filter-buttons\">\n        {getUniqueNames(schedule).map((name) => (\n          <button\n            key={name}\n            className=\"mr-2 px-3 py-1 bg-gray-500 text-white rounded\"\n            onClick={() => setFilter(name)}\n          >\n            {name}\n          </button>\n        ))}\n        <button\n          className=\"mr-2 px-3 py-1 bg-gray-500 text-white rounded\"\n          onClick={() => setFilter(\"\")} // Clear the filter\n        >\n          All\n        </button>\n      </div>\n\n      {/* Schedule Display */}\n      <div className=\"schedule-container\">\n        {filteredSchedule && filteredSchedule.length > 0 ? (\n          filteredSchedule.map((day) => (\n            <div key={day.date} className=\"schedule-day\">\n              <div className=\"schedule-day-name\">{day.date}</div>\n              <div className=\"schedule-bars\">\n                {day.blocks && day.blocks.length > 0 ? (\n                  day.blocks.map((block, index) => {\n                    // Ensure block.start and block.end are defined before processing\n                    if (!block.start || !block.end) return null;\n\n                    // Calculate block duration in hours\n                    const duration = getBlockDuration(block.start, block.end);\n                    const blockColor = getBlockColor(block.time);\n\n                    return (\n                      <div\n                        key={index}\n                        className={`schedule-block ${blockColor} p-2 my-1 rounded`}\n                        style={{\n                          width: `${duration * 100}px`, // Width is based on duration\n                          marginBottom: \"10px\", // Add some spacing between blocks\n                        }}\n                      >\n                        <div className=\"font-semibold text-white\">{block.event}</div>\n                        <div className=\"text-sm text-white\">{block.time}</div>\n                        <div className=\"text-xs text-white\">{block.location}</div>\n                        <div className=\"text-xs text-white\">\n                          {block.who && block.who.split(\";\").join(\", \")}\n                        </div>\n                        <div className=\"text-xs text-white\">\n                          {block.cc && block.cc.split(\";\").join(\", \")}\n                        </div>\n                      </div>\n                    );\n                  })\n                ) : (\n                  <div>No blocks available for this day</div>\n                )}\n              </div>\n            </div>\n          ))\n        ) : (\n          <div>No schedule data available</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ScheduleDisplay;","import React, { useState, useEffect } from \"react\";\nimport Papa from \"papaparse\";\nimport ScheduleDisplay from \"./ScheduleDisplay\";\n\n// Helper function to extract unique names from the 'who' and 'cc' fields\nconst getUniqueNames = (tasks) => {\n  const names = new Set();\n  tasks.forEach((task) => {\n    if (task.who) {\n      task.who.forEach((name) => names.add(name.trim())); // Add each unique 'who' name\n    }\n    if (task.cc) {\n      task.cc.split(\";\").forEach((name) => names.add(name.trim())); // Add each unique 'cc' name\n    }\n  });\n  return [...names];\n};\n\nexport default function SpecialWeekTodos() {\n  const [tasks, setTasks] = useState([]);\n  const [schedule, setSchedule] = useState([]);\n  const [filter, setFilter] = useState(null);\n  const [names, setNames] = useState([]);\n\n  useEffect(() => {\n    // Fetch and parse tasks CSV\n    async function fetchTasks() {\n      const response = await fetch(process.env.PUBLIC_URL + \"/tasks.csv\");\n      const text = await response.text();\n      Papa.parse(text, {\n        header: true,\n        skipEmptyLines: true,\n        delimiter: \",\",\n        complete: (result) => {\n          const formattedTasks = result.data.map((task) => ({\n            ...task,\n            who: task.who.split(\";\"),\n            due_date: formatDate(task.due_date),  // Format the date\n          }));\n          setTasks(formattedTasks.sort((a, b) => new Date(a.due_date) - new Date(b.due_date))); // Sort tasks by date\n          setNames(getUniqueNames(formattedTasks)); // Extract unique names for the filter buttons\n        },\n      });\n    }\n\n    // Fetch and parse schedule CSV\n    async function fetchSchedule() {\n      const response = await fetch(process.env.PUBLIC_URL + \"/schedule.csv\");\n      const text = await response.text();\n      Papa.parse(text, {\n        header: true,\n        skipEmptyLines: true,\n        delimiter: \",\",\n        complete: (result) => {\n          const formattedSchedule = result.data.reduce((acc, row) => {\n            const { date, time, start, end, event, location } = row;\n\n            // Format date and time\n            const formattedDate = formatDate(date);\n            let day = acc.find((day) => day.date === formattedDate);\n            if (!day) {\n              day = { date: formattedDate, blocks: [] };\n              acc.push(day);\n            }\n\n            day.blocks.push({ time, start, end, event, location });\n\n            return acc;\n          }, []);\n          \n          setSchedule(formattedSchedule);  // Set the schedule state here\n        },\n      });\n    }\n\n    fetchTasks();\n    fetchSchedule();\n  }, []);\n\n  // Helper function to format dates\n  const formatDate = (dateStr) => {\n    const date = new Date(dateStr);\n    const options = { year: 'numeric', month: 'long', day: 'numeric' };\n    return date.toLocaleDateString('en-GB', options); // Format as \"30 April 2025\"\n  };\n\n  // Filter tasks based on the selected filter\n  const filteredTasks = filter ? tasks.filter((task) => task.who.includes(filter)) : tasks;\n\n  return (\n    <div className=\"p-4 max-w-lg mx-auto\">\n      <h1 className=\"text-xl font-bold mb-4\">Special Week 2025 - Plan and To-Dos</h1>\n      <h3>\n        Below please find details for Special Week 2025 planning. In the first block, you'll see the calendar for\n        the week. The second section has the to-dos that need to be completed for the week. By clicking on your name,\n        you'll see the information that is relevant for you - either because your feedback is needed, or on an FYI\n        basis.\n      </h3>\n\n      {/* Schedule block */}\n      <div id=\"schedule-block\" className=\"my-6\">\n        <ScheduleDisplay schedule={schedule} /> {/* Pass the schedule to ScheduleDisplay */}\n      </div>\n\n      {/* Dynamic Filter buttons */}\n      <div className=\"mb-4\">\n        <button className=\"mr-2 px-3 py-1 bg-blue-500 text-white rounded\" onClick={() => setFilter(null)}>\n          All\n        </button>\n        {names.map((name) => (\n          <button\n            key={name}\n            className=\"mr-2 px-3 py-1 bg-gray-500 text-white rounded\"\n            onClick={() => setFilter(name)}\n          >\n            {name}\n          </button>\n        ))}\n      </div>\n\n      {/* Todo list */}\n      <ul className=\"list-none space-y-4\">\n        {filteredTasks.map((todo) => (\n          <li key={todo.id} className=\"p-4 bg-white shadow-md rounded-lg border border-gray-200\">\n            <div className=\"flex items-center\">\n              {/* Checkbox and Description on the same line */}\n              <input\n                disabled\n                className=\"mr-3 h-5 w-5 text-blue-500 border-gray-300 rounded\"\n                type=\"checkbox\"\n                checked={todo.status === \"done\"}\n              />\n              <span className={`font-semibold text-lg ${todo.status === \"done\" ? \"line-through text-gray-400\" : \"text-gray-900\"}`}>\n                &nbsp;{todo.description}\n              </span>\n            </div>\n            <div className=\"mt-2 ml-8 text-gray-700 text-sm space-y-1\">\n              {/* Date, Who, Notes */}\n              <div className=\"todo-detail\">\n                <span className=\"font-semibold text-gray-900\">📅</span> {todo.due_date}\n              </div>\n              <div className=\"todo-detail\">\n                <span className=\"font-semibold text-gray-900\">👤</span> \n                {todo.who ? todo.who.join(\" \") : \"\"} {/* Add space between names */}\n              </div>\n              {todo.cc && (\n                <div className=\"todo-detail\">\n                  <span className=\"font-semibold text-gray-900\">📢 </span> {todo.cc ? todo.cc.split(\";\").join(\" \") : \"\"}\n                </div>\n              )}\n              {todo.notes && <div className=\"todo-detail italic text-gray-600\">📝 {todo.notes}</div>}\n            </div>\n            <div><span>&nbsp;</span></div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport SpecialWeekTodos from \"./SpecialWeekTodos\"; // Import the SpecialWeekTodos component\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div>\n      {/* Special Week Todos Component */}\n      <SpecialWeekTodos />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\nimport './index.css';  //\nimport './SpecialWeek.css';  //\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(<App />);\n"],"sourceRoot":""}