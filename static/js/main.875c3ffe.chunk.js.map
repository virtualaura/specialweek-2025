{"version":3,"sources":["SpecialWeekTodos.js","App.js","index.js"],"names":["SpecialWeekTodos","tasks","setTasks","useState","schedule","setSchedule","filter","setFilter","useEffect","async","response","fetch","process","text","Papa","parse","header","skipEmptyLines","delimiter","complete","result","data","map","task","who","split","fetchTasks","formattedSchedule","reduce","acc","row","date","time","start","end","event","location","day","find","blocks","push","fetchSchedule","filteredTasks","includes","timeOfDayColor","timeSlot","React","createElement","className","id","index","key","slot","block","b","onClick","todo","disabled","type","checked","status","description","due_date","join","cc","notes","App","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.875c3ffe.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Papa from \"papaparse\";\nimport './SpecialWeekTodos.css';\n\nconst SpecialWeekTodos = () => {\n  const [tasks, setTasks] = useState([]);\n  const [schedule, setSchedule] = useState([]);\n  const [filter, setFilter] = useState(null);\n\n  // Fetch tasks from CSV\n  useEffect(() => {\n    async function fetchTasks() {\n      const response = await fetch(process.env.PUBLIC_URL + \"/tasks.csv\");\n      const text = await response.text();\n      Papa.parse(text, {\n        header: true,\n        skipEmptyLines: true,\n        delimiter: \",\",\n        complete: (result) => {\n          setTasks(result.data.map(task => ({\n            ...task,\n            who: task.who.split(\";\")\n          })));\n        }\n      });\n    }\n    fetchTasks();\n  }, []);\n\n  // Fetch schedule from CSV\n  useEffect(() => {\n    async function fetchSchedule() {\n      const response = await fetch(process.env.PUBLIC_URL + \"/schedule.csv\");\n      const text = await response.text();\n\n      Papa.parse(text, {\n        header: true,\n        skipEmptyLines: true,\n        delimiter: \",\",\n        complete: (result) => {\n          const formattedSchedule = result.data.reduce((acc, row) => {\n            const { date, time, start, end, event, location } = row;\n\n            let day = acc.find((day) => day.date === date);\n            if (!day) {\n              day = { date, blocks: [] };\n              acc.push(day);\n            }\n\n            day.blocks.push({ time, start, end, event, location });\n            return acc;\n          }, []);\n          setSchedule(formattedSchedule);\n        }\n      });\n    }\n\n    fetchSchedule();\n  }, []);\n\n  // Filter tasks by a name\n  const filteredTasks = filter ? tasks.filter(task => task.who.includes(filter)) : tasks;\n\n  // Event block colors based on time of day\n  const timeOfDayColor = (timeSlot) => {\n    const morningTimes = [\"Morning1\", \"Morning2\"];\n    const afternoonTimes = [\"Afternoon\"];\n    const lunchTimes = [\"Lunch\"];\n    const breakTimes = [\"Break\"];\n    const eveningTimes = [\"Evening\"];\n\n    if (morningTimes.includes(timeSlot)) return \"bg-blue-500\";\n    if (afternoonTimes.includes(timeSlot)) return \"bg-yellow-500\";\n    if (lunchTimes.includes(timeSlot)) return \"bg-green-500\";\n    if (breakTimes.includes(timeSlot)) return \"bg-gray-500\";\n    if (eveningTimes.includes(timeSlot)) return \"bg-red-500\";\n    return \"bg-white\"; // Default color\n  };\n\n  return (\n    <div className=\"p-4 max-w-lg mx-auto\">\n      <h1 className=\"text-xl font-bold mb-4\">Special Week 2025 - Plan and To-Dos</h1>\n      <h3>\n        Below please find details for Special Week 2025 planning. In the first block,\n        you'll see the calendar for the week. The second section has the to-dos that need\n        to be completed for the week. By clicking on your name, you'll see the information\n        that is relevant for you.\n      </h3>\n\n      {/* Calendar Display */}\n      <div id=\"schedule-block\" className=\"my-6\">\n        <h2 className=\"text-lg font-semibold\">Weekly Schedule</h2>\n        <div className=\"schedule-container\">\n          {schedule.map((day, index) => (\n            <div key={index} className=\"schedule-day\">\n              <h3 className=\"text-center\">{day.date}</h3>\n              <div className=\"schedule-bars\">\n                {[\"Morning1\", \"Break\", \"Morning2\", \"Lunch\", \"Afternoon\", \"Evening\"].map((slot) => {\n                  const block = day.blocks.find((b) => b.time === slot);\n                  return (\n                    <div key={slot} className={`schedule-block ${timeOfDayColor(slot)}`}>\n                      {block && (\n                        <div className=\"event-text\">\n                          <span>{block.event}</span>\n                        </div>\n                      )}\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* To-Do List */}\n      <div className=\"mb-6\">\n        <h2 className=\"text-lg font-semibold\">To-Do List</h2>\n        <div className=\"filter-buttons mb-4\">\n          <button className=\"mr-2 px-3 py-1 bg-blue-500 text-white rounded\" onClick={() => setFilter(null)}>All</button>\n          <button className=\"mr-2 px-3 py-1 bg-gray-500 text-white rounded\" onClick={() => setFilter(\"Kim\")}>Kim</button>\n          <button className=\"px-3 py-1 bg-gray-500 text-white rounded\" onClick={() => setFilter(\"Julia\")}>Julia</button>\n        </div>\n        <ul className=\"list-none space-y-4\">\n          {filteredTasks.map((todo) => (\n            <li key={todo.id} className=\"p-4 bg-white shadow-md rounded-lg border border-gray-200\">\n              <div className=\"flex items-center\">\n                <input\n                  disabled\n                  className=\"mr-3 h-5 w-5 text-blue-500 border-gray-300 rounded\"\n                  type=\"checkbox\"\n                  checked={todo.status === \"done\"}\n                />\n                <div className={`font-semibold text-lg ${todo.status === \"done\" ? \"line-through text-gray-400\" : \"text-gray-900\"}`}>\n                  {todo.description}\n                </div>\n              </div>\n              <div className=\"mt-2 ml-8 text-gray-700 text-sm space-y-1\">\n                <div><span className=\"font-semibold text-gray-900\">üìÖ Due Date:</span> {todo.due_date}</div>\n                <div><span className=\"font-semibold text-gray-900\">üë§ Who:</span> {todo.who ? todo.who.split(\";\").join(\", \") : \"\"}</div>\n                {todo.cc && <div><span className=\"font-semibold text-gray-900\">üì¢ For Info:</span> {todo.cc}</div>}\n                {todo.notes && <div className=\"italic text-gray-600\">üìù {todo.notes}</div>}\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default SpecialWeekTodos;\n","import React from \"react\";\nimport SpecialWeekTodos from \"./SpecialWeekTodos\"; // Import the SpecialWeekTodos component\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div>\n      {/* Special Week Todos Component */}\n      <SpecialWeekTodos />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(<App />);\n"],"sourceRoot":""}