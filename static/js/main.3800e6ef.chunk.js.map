{"version":3,"sources":["ScheduleDisplay.js","SpecialWeekTodos.js","App.js","index.js"],"names":["getBlockColor","event","ScheduleDisplay","_ref","schedule","calculateHeight","start","end","startTime","Date","getTime","React","createElement","style","display","justifyContent","map","day","key","date","flex","padding","position","paddingTop","blocks","block","index","top","height","left","right","backgroundColor","borderRadius","color","zIndex","className","time","location","getUniqueNames","tasks","names","Set","forEach","task","who","name","add","trim","cc","split","SpecialWeekTodos","setTasks","useState","setSchedule","filter","setFilter","setNames","useEffect","async","response","fetch","process","text","Papa","parse","header","skipEmptyLines","delimiter","complete","result","formattedTasks","data","due_date","formatDate","sort","a","b","fetchTasks","formattedSchedule","reduce","acc","row","formattedDate","find","push","fetchSchedule","dateStr","toLocaleDateString","year","month","filteredTasks","includes","id","onClick","todo","disabled","type","checked","status","description","join","notes","App","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.3800e6ef.chunk.js","sourcesContent":["import React from \"react\";\n\nconst ScheduleDisplay = ({ schedule }) => {\n  // Set the scale factor for the block height based on time (e.g., 1 hour = 25px)\n  const scaleFactor = 25;\n\n  // Helper function to calculate the duration of an event\n  const calculateHeight = (start, end) => {\n    const startTime = new Date(`1970-01-01T${start}:00Z`).getTime();\n    const endTime = new Date(`1970-01-01T${end}:00Z`).getTime();\n    const duration = (endTime - startTime) / (1000 * 60 * 60); // Duration in hours\n    return duration * scaleFactor; // Scale by factor (e.g., 25px per hour)\n  };\n\n  return (\n    <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n      {/* Map through the schedule, grouped by day */}\n      {schedule.map((day) => (\n        <div key={day.date} style={{ flex: 1, padding: \"0 10px\" }}>\n          <h3>{day.date}</h3>\n          <div style={{ position: \"relative\", paddingTop: \"10px\" }}>\n            {day.blocks.map((block, index) => (\n              <div\n                key={index}\n                style={{\n                  position: \"absolute\",\n                  top: calculateHeight(\"00:00\", block.start), // Position based on start time\n                  height: calculateHeight(block.start, block.end), // Height based on duration\n                  left: 0,\n                  right: 0,\n                  padding: \"5px\",\n                  backgroundColor: getBlockColor(block.event), // Dynamic color based on event type\n                  borderRadius: \"5px\",\n                  color: \"white\",\n                  zIndex: index + 1, // Ensure blocks stack correctly\n                }}\n              >\n                <div className=\"font-semibold\">{block.event}</div>\n                <div className=\"text-sm\">{block.time}</div>\n                <div className=\"text-xs\">{block.location}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\n// Helper function to get the background color for each event\nconst getBlockColor = (event) => {\n  switch (event) {\n    case \"Workshop\":\n      return \"#3498db\"; // Blue\n    case \"Gouter\":\n      return \"#f1c40f\"; // Yellow\n    case \"Lunch\":\n      return \"#e67e22\"; // Orange\n    case \"Team Meeting\":\n      return \"#2ecc71\"; // Green\n    case \"Keynote\":\n      return \"#9b59b6\"; // Purple\n    case \"Hackathon\":\n      return \"#e74c3c\"; // Red\n    case \"Pitch Event\":\n      return \"#16a085\"; // Teal\n    default:\n      return \"#bdc3c7\"; // Grey for undefined events\n  }\n};\n\nexport default ScheduleDisplay;\n","import React, { useState, useEffect } from \"react\";\nimport Papa from \"papaparse\";\nimport ScheduleDisplay from \"./ScheduleDisplay\";\n\n// Helper function to extract unique names from the 'who' and 'cc' fields\nconst getUniqueNames = (tasks) => {\n  const names = new Set();\n  tasks.forEach((task) => {\n    if (task.who) {\n      task.who.forEach((name) => names.add(name.trim())); // Add each unique 'who' name\n    }\n    if (task.cc) {\n      task.cc.split(\";\").forEach((name) => names.add(name.trim())); // Add each unique 'cc' name\n    }\n  });\n  return [...names];\n};\n\nexport default function SpecialWeekTodos() {\n  const [tasks, setTasks] = useState([]);\n  const [schedule, setSchedule] = useState([]);\n  const [filter, setFilter] = useState(null);\n  const [names, setNames] = useState([]);\n\n  useEffect(() => {\n    // Fetch and parse tasks CSV\n    async function fetchTasks() {\n      const response = await fetch(process.env.PUBLIC_URL + \"/tasks.csv\");\n      const text = await response.text();\n      Papa.parse(text, {\n        header: true,\n        skipEmptyLines: true,\n        delimiter: \",\",\n        complete: (result) => {\n          const formattedTasks = result.data.map((task) => ({\n            ...task,\n            who: task.who.split(\";\"),\n            due_date: formatDate(task.due_date),  // Format the date\n          }));\n          setTasks(formattedTasks.sort((a, b) => new Date(a.due_date) - new Date(b.due_date))); // Sort tasks by date\n          setNames(getUniqueNames(formattedTasks)); // Extract unique names for the filter buttons\n        },\n      });\n    }\n\n    // Fetch and parse schedule CSV\n    async function fetchSchedule() {\n      const response = await fetch(process.env.PUBLIC_URL + \"/schedule.csv\");\n      const text = await response.text();\n      Papa.parse(text, {\n        header: true,\n        skipEmptyLines: true,\n        delimiter: \",\",\n        complete: (result) => {\n          const formattedSchedule = result.data.reduce((acc, row) => {\n            const { date, time, start, end, event, location } = row;\n\n            // Format date and time\n            const formattedDate = formatDate(date);\n            let day = acc.find((day) => day.date === formattedDate);\n            if (!day) {\n              day = { date: formattedDate, blocks: [] };\n              acc.push(day);\n            }\n\n            day.blocks.push({ time, start, end, event, location });\n\n            return acc;\n          }, []);\n          \n          setSchedule(formattedSchedule);  // Set the schedule state here\n        },\n      });\n    }\n\n    fetchTasks();\n    fetchSchedule();\n  }, []);\n\n  // Helper function to format dates\n  const formatDate = (dateStr) => {\n    const date = new Date(dateStr);\n    const options = { year: 'numeric', month: 'long', day: 'numeric' };\n    return date.toLocaleDateString('en-GB', options); // Format as \"30 April 2025\"\n  };\n\n  // Filter tasks based on the selected filter\n  const filteredTasks = filter ? tasks.filter((task) => task.who.includes(filter)) : tasks;\n\n  return (\n    <div className=\"p-4 max-w-lg mx-auto\">\n      <h1 className=\"text-xl font-bold mb-4\">Special Week 2025 - Plan and To-Dos</h1>\n      <h3>\n        Below please find details for Special Week 2025 planning. In the first block, you'll see the calendar for\n        the week. The second section has the to-dos that need to be completed for the week. By clicking on your name,\n        you'll see the information that is relevant for you - either because your feedback is needed, or on an FYI\n        basis.\n      </h3>\n\n      {/* Schedule block */}\n      <div id=\"schedule-block\" className=\"my-6\">\n        <ScheduleDisplay schedule={schedule} /> {/* Pass the schedule to ScheduleDisplay */}\n      </div>\n\n      {/* Dynamic Filter buttons */}\n      <div className=\"mb-4\">\n        <button className=\"mr-2 px-3 py-1 bg-blue-500 text-white rounded\" onClick={() => setFilter(null)}>\n          All\n        </button>\n        {names.map((name) => (\n          <button\n            key={name}\n            className=\"mr-2 px-3 py-1 bg-gray-500 text-white rounded\"\n            onClick={() => setFilter(name)}\n          >\n            {name}\n          </button>\n        ))}\n      </div>\n\n      {/* Todo list */}\n      <ul className=\"list-none space-y-4\">\n        {filteredTasks.map((todo) => (\n          <li key={todo.id} className=\"p-4 bg-white shadow-md rounded-lg border border-gray-200\">\n            <div className=\"flex items-center\">\n              {/* Checkbox and Description on the same line */}\n              <input\n                disabled\n                className=\"mr-3 h-5 w-5 text-blue-500 border-gray-300 rounded\"\n                type=\"checkbox\"\n                checked={todo.status === \"done\"}\n              />\n              <span className={`font-semibold text-lg ${todo.status === \"done\" ? \"line-through text-gray-400\" : \"text-gray-900\"}`}>\n                &nbsp;{todo.description}\n              </span>\n            </div>\n            <div className=\"mt-2 ml-8 text-gray-700 text-sm space-y-1\">\n              {/* Date, Who, Notes */}\n              <div className=\"todo-detail\">\n                <span className=\"font-semibold text-gray-900\">📅</span> {todo.due_date}\n              </div>\n              <div className=\"todo-detail\">\n                <span className=\"font-semibold text-gray-900\">👤</span> \n                {todo.who ? todo.who.join(\" \") : \"\"} {/* Add space between names */}\n              </div>\n              {todo.cc && (\n                <div className=\"todo-detail\">\n                  <span className=\"font-semibold text-gray-900\">📢 </span> {todo.cc ? todo.cc.split(\";\").join(\" \") : \"\"}\n                </div>\n              )}\n              {todo.notes && <div className=\"todo-detail italic text-gray-600\">📝 {todo.notes}</div>}\n            </div>\n            <div><span>&nbsp;</span></div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport SpecialWeekTodos from \"./SpecialWeekTodos\"; // Import the SpecialWeekTodos component\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div>\n      {/* Special Week Todos Component */}\n      <SpecialWeekTodos />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\nimport './index.css';  //\nimport './SpecialWeek.css';  //\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(<App />);\n"],"sourceRoot":""}