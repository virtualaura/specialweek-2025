{"version":3,"sources":["ScheduleDisplay.js","SpecialWeekTodos.js","App.js","index.js"],"names":["ScheduleDisplay","scheduleData","setScheduleData","useState","getBlockDuration","start","end","parseTime","time","hours","minutes","split","map","Number","startTimeInMinutes","getBlockColor","event","Workshop","Lunch","Gouter","Team Meeting","Keynote","Hackathon","Pitch Event","Evening","useEffect","fetch","then","response","text","csvText","Papa","parse","header","complete","results","groupedSchedule","data","forEach","row","day","push","processedSchedule","Object","entries","_ref","events","catch","error","console","React","createElement","className","_ref2","key","index","duration","start_time","end_time","startMinutes","style","height","top","location","getUniqueNames","tasks","names","Set","task","who","name","add","trim","cc","SpecialWeekTodos","setTasks","schedule","setSchedule","filter","setFilter","setNames","async","process","skipEmptyLines","delimiter","result","formattedTasks","due_date","formatDate","sort","a","b","Date","fetchTasks","formattedSchedule","reduce","acc","date","formattedDate","find","blocks","fetchSchedule","dateStr","toLocaleDateString","year","month","filteredTasks","includes","id","onClick","todo","disabled","type","checked","status","description","join","notes","App","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.66edfda2.chunk.js","sourcesContent":["// CLAUDE\nimport React, { useState, useEffect } from 'react';  \nimport Papa from 'papaparse';\n\nconst ScheduleDisplay = () => {\n  const [scheduleData, setScheduleData] = useState([]);\n\n  // Helper function to parse and calculate block duration\n  const getBlockDuration = (start, end) => {\n    const parseTime = (time) => {\n      const [hours, minutes] = time.split(\":\").map(Number);\n      return hours * 60 + minutes; // convert time to total minutes\n    };\n    const startTimeInMinutes = parseTime(start);\n    const endTimeInMinutes = parseTime(end);\n    return endTimeInMinutes - startTimeInMinutes; // return duration in minutes\n  };\n\n  // Helper function to get block color based on the event type\n  const getBlockColor = (event) => {\n    const colorMap = {\n      'Workshop': 'bg-blue-500',\n      'Lunch': 'bg-yellow-500',\n      'Gouter': 'bg-yellow-100',\n      'Team Meeting': 'bg-green-500',\n      'Keynote': 'bg-purple-500',\n      'Hackathon': 'bg-red-500',\n      'Pitch Event': 'bg-orange-500',\n      'Evening': 'bg-indigo-500'\n    };\n    return colorMap[event] || 'bg-gray-300';\n  };\n\n  useEffect(() => {\n    // Fetch and parse the CSV file\n    fetch('/schedule.csv')\n      .then(response => response.text())\n      .then(csvText => {\n        // Parse CSV using Papaparse\n        Papa.parse(csvText, {\n          header: true,\n          complete: (results) => {\n            // Group results by day\n            const groupedSchedule = {};\n            results.data.forEach(row => {\n              if (!groupedSchedule[row.day]) {\n                groupedSchedule[row.day] = [];\n              }\n              groupedSchedule[row.day].push(row);\n            });\n\n            // Convert grouped schedule to array\n            const processedSchedule = Object.entries(groupedSchedule).map(([day, events]) => ({\n              day,\n              events\n            }));\n\n            setScheduleData(processedSchedule);\n          }\n        });\n      })\n      .catch(error => console.error('Error fetching schedule:', error));\n  }, []);\n\n  // Calculate total minutes in a day for percentage height\n  const TOTAL_DAY_MINUTES = 24 * 60;\n\n  return (\n    <div className=\"flex w-full h-screen p-4 space-x-4\">\n      {scheduleData.map(({ day, events }) => (\n        <div key={day} className=\"flex-1 border rounded shadow-lg\">\n          <div className=\"text-center font-bold p-2 bg-gray-200\">{day}</div>\n          <div className=\"relative h-full p-2\">\n            {events.map((event, index) => {\n              const duration = getBlockDuration(event.start_time, event.end_time);\n              const startMinutes = getBlockDuration('00:00', event.start_time);\n              \n              return (\n                <div \n                  key={index} \n                  className={`absolute w-full ${getBlockColor(event.event)} text-white p-2 rounded`}\n                  style={{\n                    height: `${(duration / TOTAL_DAY_MINUTES) * 100}%`,\n                    top: `${(startMinutes / TOTAL_DAY_MINUTES) * 100}%`\n                  }}\n                >\n                  <div className=\"font-semibold\">{event.event}</div>\n                  <div className=\"text-sm\">{`${event.start_time} - ${event.end_time}`}</div>\n                  <div className=\"text-xs\">{event.location}</div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ScheduleDisplay;","import React, { useState, useEffect } from \"react\";\nimport Papa from \"papaparse\";\nimport ScheduleDisplay from \"./ScheduleDisplay\";\n\n// Helper function to extract unique names from the 'who' and 'cc' fields\nconst getUniqueNames = (tasks) => {\n  const names = new Set();\n  tasks.forEach((task) => {\n    if (task.who) {\n      task.who.forEach((name) => names.add(name.trim())); // Add each unique 'who' name\n    }\n    if (task.cc) {\n      task.cc.split(\";\").forEach((name) => names.add(name.trim())); // Add each unique 'cc' name\n    }\n  });\n  return [...names];\n};\n\nexport default function SpecialWeekTodos() {\n  const [tasks, setTasks] = useState([]);\n  const [schedule, setSchedule] = useState([]);\n  const [filter, setFilter] = useState(null);\n  const [names, setNames] = useState([]);\n\n  useEffect(() => {\n    // Fetch and parse tasks CSV\n    async function fetchTasks() {\n      const response = await fetch(process.env.PUBLIC_URL + \"/tasks.csv\");\n      const text = await response.text();\n      Papa.parse(text, {\n        header: true,\n        skipEmptyLines: true,\n        delimiter: \",\",\n        complete: (result) => {\n          const formattedTasks = result.data.map((task) => ({\n            ...task,\n            who: task.who.split(\";\"),\n            due_date: formatDate(task.due_date),  // Format the date\n          }));\n          setTasks(formattedTasks.sort((a, b) => new Date(a.due_date) - new Date(b.due_date))); // Sort tasks by date\n          setNames(getUniqueNames(formattedTasks)); // Extract unique names for the filter buttons\n        },\n      });\n    }\n\n    // Fetch and parse schedule CSV\n    async function fetchSchedule() {\n      const response = await fetch(process.env.PUBLIC_URL + \"/schedule.csv\");\n      const text = await response.text();\n      Papa.parse(text, {\n        header: true,\n        skipEmptyLines: true,\n        delimiter: \",\",\n        complete: (result) => {\n          const formattedSchedule = result.data.reduce((acc, row) => {\n            const { date, time, start, end, event, location } = row;\n\n            // Format date and time\n            const formattedDate = formatDate(date);\n            let day = acc.find((day) => day.date === formattedDate);\n            if (!day) {\n              day = { date: formattedDate, blocks: [] };\n              acc.push(day);\n            }\n\n            day.blocks.push({ time, start, end, event, location });\n\n            return acc;\n          }, []);\n          \n          setSchedule(formattedSchedule);  // Set the schedule state here\n        },\n      });\n    }\n\n    fetchTasks();\n    fetchSchedule();\n  }, []);\n\n  // Helper function to format dates\n  const formatDate = (dateStr) => {\n    const date = new Date(dateStr);\n    const options = { year: 'numeric', month: 'long', day: 'numeric' };\n    return date.toLocaleDateString('en-GB', options); // Format as \"30 April 2025\"\n  };\n\n  // Filter tasks based on the selected filter\n  const filteredTasks = filter ? tasks.filter((task) => task.who.includes(filter)) : tasks;\n\n  return (\n    <div className=\"p-4 max-w-lg mx-auto\">\n      <h1 className=\"text-xl font-bold mb-4\">Special Week 2025 - Schedule and To-Dos</h1>\n      <h3>\n        Below please find details for Special Week 2025 planning. In the first block, you'll see the calendar for\n        the week, startung on Tuesday the 13th of May in the morning and finishing Friday the 16th of May in the afternoon. \n        <br/>\n        The second block has the to-dos that need to be completed for the week. By clicking on your name,\n        you'll see the information that is relevant for you - either because your feedback is needed (if your name is in the 👤 section), or on an FYI\n        basis (📢).\n      </h3>\n\n      {/* Schedule block */}\n      <div id=\"schedule-block\" className=\"my-6\">\n        <ScheduleDisplay schedule={schedule} /> {/* Pass the schedule to ScheduleDisplay */}\n      </div>\n\n      {/* Dynamic Filter buttons */}\n      <div className=\"mb-4\">\n        <button className=\"mr-2 px-3 py-1 bg-blue-500 text-white rounded\" onClick={() => setFilter(null)}>\n          All\n        </button>\n        {names.map((name) => (\n          <button\n            key={name}\n            className=\"mr-2 px-3 py-1 bg-gray-500 text-white rounded\"\n            onClick={() => setFilter(name)}\n          >\n            {name}\n          </button>\n        ))}\n      </div>\n\n      {/* Todo list */}\n      <ul className=\"list-none space-y-4\">\n        {filteredTasks.map((todo) => (\n          <li key={todo.id} className=\"p-4 bg-white shadow-md rounded-lg border border-gray-200\">\n            <div className=\"flex items-center\">\n              {/* Checkbox and Description on the same line */}\n              <input\n                disabled\n                className=\"mr-3 h-5 w-5 text-blue-500 border-gray-300 rounded\"\n                type=\"checkbox\"\n                checked={todo.status === \"done\"}\n              />\n              <span className={`font-semibold text-lg ${todo.status === \"done\" ? \"line-through text-gray-400\" : \"text-gray-900\"}`}>\n                &nbsp;{todo.description}\n              </span>\n            </div>\n            <div className=\"mt-2 ml-8 text-gray-700 text-sm space-y-1\">\n              {/* Date, Who, Notes */}\n              <div className=\"todo-detail\">\n                <span className=\"font-semibold text-gray-900\">📅</span> {todo.due_date}\n              </div>\n              <div className=\"todo-detail\">\n                <span className=\"font-semibold text-gray-900\">👤</span> \n                {todo.who ? todo.who.join(\" \") : \"\"} {/* Add space between names */}\n              </div>\n              {todo.cc && (\n                <div className=\"todo-detail\">\n                  <span className=\"font-semibold text-gray-900\">📢 </span> {todo.cc ? todo.cc.split(\";\").join(\" \") : \"\"}\n                </div>\n              )}\n              {todo.notes && <div className=\"todo-detail italic text-gray-600\">📝 {todo.notes}</div>}\n            </div>\n            <div><span>&nbsp;</span></div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport SpecialWeekTodos from \"./SpecialWeekTodos\"; // Import the SpecialWeekTodos component\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div>\n      {/* Special Week Todos Component */}\n      <SpecialWeekTodos />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\nimport './index.css';  //\nimport './SpecialWeek.css';  //\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(<App />);\n"],"sourceRoot":""}