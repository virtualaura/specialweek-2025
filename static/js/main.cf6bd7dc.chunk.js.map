{"version":3,"sources":["ScheduleDisplay.js","SpecialWeekTodos.js","App.js","index.js"],"names":["ScheduleDisplay","_ref","schedule","console","log","React","createElement","className","length","map","day","key","date","blocks","Array","isArray","block","index","startTime","Date","start","blockWidth","end","blockColor","time","includes","style","width","event","SpecialWeekTodos","tasks","setTasks","useState","setSchedule","filter","setFilter","useEffect","async","response","fetch","process","text","Papa","parse","header","skipEmptyLines","delimiter","complete","result","formattedTasks","data","task","who","split","due_date","formatDate","sort","a","b","fetchTasks","formattedSchedule","reduce","acc","row","location","formattedDate","find","push","fetchSchedule","dateStr","toLocaleDateString","year","month","filteredTasks","id","onClick","todo","disabled","type","checked","status","description","join","cc","notes","App","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.cf6bd7dc.chunk.js","sourcesContent":["// ScheduleDisplay.js\nimport React from \"react\";\n\nconst ScheduleDisplay = ({ schedule }) => {\n\n  console.log(schedule); // Log the data for debugging\n  \n  return (\n    <div className=\"schedule-container\">\n      {schedule && schedule.length > 0 ? (\n        schedule.map((day) => (\n          <div key={day.date} className=\"schedule-day\">\n            <div className=\"schedule-day-name\">{day.date}</div>\n            <div className=\"schedule-bars\">\n              {day.blocks && Array.isArray(day.blocks) && day.blocks.length > 0 ? (\n                day.blocks.map((block, index) => {\n                  // Calculate block width based on start and end times\n                  const startTime = new Date(`1970-01-01T${block.start}`);\n                  const endTime = new Date(`1970-01-01T${block.end}`);\n                  const blockWidth = (endTime - startTime) / 3600000; // Convert to hours\n\n                  // Set the background color based on the time slot\n                  let blockColor = \"\";\n                  if (block.time.includes(\"Morning\")) blockColor = \"bg-blue-500\";\n                  if (block.time.includes(\"Afternoon\")) blockColor = \"bg-green-500\";\n                  if (block.time.includes(\"Lunch\")) blockColor = \"bg-yellow-500\";\n                  if (block.time.includes(\"Evening\")) blockColor = \"bg-red-500\";\n\n                  return (\n                    <div\n                      key={index}\n                      className={`schedule-block ${blockColor}`}\n                      style={{ width: `${blockWidth * 100}px` }}\n                    >\n                      {block.event}\n                    </div>\n                  );\n                })\n              ) : (\n                <div>No blocks available for this day</div>\n              )}\n            </div>\n          </div>\n        ))\n      ) : (\n        <div>No schedule data available</div>\n      )}\n    </div>\n  );\n};\n\nexport default ScheduleDisplay;\n","import React, { useState, useEffect } from \"react\";\nimport Papa from \"papaparse\";\nimport ScheduleDisplay from \"./ScheduleDisplay\";\n\nexport default function SpecialWeekTodos() {\n  const [tasks, setTasks] = useState([]);\n  const [schedule, setSchedule] = useState([]);\n  const [filter, setFilter] = useState(null);\n\n  useEffect(() => {\n    // Fetch and parse tasks CSV\n    async function fetchTasks() {\n      const response = await fetch(process.env.PUBLIC_URL + \"/tasks.csv\");\n      const text = await response.text();\n      Papa.parse(text, {\n        header: true,\n        skipEmptyLines: true,\n        delimiter: \",\",\n        complete: (result) => {\n          const formattedTasks = result.data.map((task) => ({\n            ...task,\n            who: task.who.split(\";\"),\n            due_date: formatDate(task.due_date),  // Format the date\n          }));\n          setTasks(formattedTasks.sort((a, b) => new Date(a.due_date) - new Date(b.due_date))); // Sort tasks by date\n        },\n      });\n    }\n\n    // Fetch and parse schedule CSV\n    async function fetchSchedule() {\n      const response = await fetch(process.env.PUBLIC_URL + \"/schedule.csv\");\n      const text = await response.text();\n      Papa.parse(text, {\n        header: true,\n        skipEmptyLines: true,\n        delimiter: \",\",\n        complete: (result) => {\n          const formattedSchedule = result.data.reduce((acc, row) => {\n            const { date, time, start, end, event, location } = row;\n\n            // Format date and time\n            const formattedDate = formatDate(date);\n            let day = acc.find((day) => day.date === formattedDate);\n            if (!day) {\n              day = { date: formattedDate, blocks: [] };\n              acc.push(day);\n            }\n\n            day.blocks.push({ time, start, end, event, location });\n\n            return acc;\n          }, []);\n          \n          setSchedule(formattedSchedule);  // Set the schedule state here\n        },\n      });\n    }\n\n    fetchTasks();\n    fetchSchedule();\n  }, []);\n\n  // Helper function to format dates\n  const formatDate = (dateStr) => {\n    const date = new Date(dateStr);\n    const options = { year: 'numeric', month: 'long', day: 'numeric' };\n    return date.toLocaleDateString('en-GB', options); // Format as \"30 April 2025\"\n  };\n\n  const filteredTasks = filter ? tasks.filter((task) => task.who.includes(filter)) : tasks;\n\n  return (\n    <div className=\"p-4 max-w-lg mx-auto\">\n      <h1 className=\"text-xl font-bold mb-4\">Special Week 2025 - Plan and To-Dos</h1>\n      <h3>\n        Below please find details for Special Week 2025 planning. In the first block, you'll see the calendar for\n        the week. The second section has the to-dos that need to be completed for the week. By clicking on your name,\n        you'll see the information that is relevant for you - either because your feedback is needed, or on an FYI\n        basis.\n      </h3>\n\n      {/* Schedule block */}\n      <div id=\"schedule-block\" className=\"my-6\">\n        <ScheduleDisplay schedule={schedule} /> {/* Pass the schedule to ScheduleDisplay */}\n      </div>\n\n      {/* Filter buttons */}\n      <div className=\"mb-4\">\n        <button className=\"mr-2 px-3 py-1 bg-blue-500 text-white rounded\" onClick={() => setFilter(null)}>\n          All\n        </button>\n        <button className=\"mr-2 px-3 py-1 bg-gray-500 text-white rounded\" onClick={() => setFilter(\"Kim\")}>\n          Kim\n        </button>\n        <button className=\"px-3 py-1 bg-gray-500 text-white rounded\" onClick={() => setFilter(\"Julia\")}>\n          Julia\n        </button>\n      </div>\n\n      {/* Todo list */}\n      <ul className=\"list-none space-y-4\">\n        {filteredTasks.map((todo) => (\n          <li key={todo.id} className=\"p-4 bg-white shadow-md rounded-lg border border-gray-200\">\n            <div className=\"flex items-center\">\n              {/* Checkbox and Description on the same line */}\n              <input\n                disabled\n                className=\"mr-3 h-5 w-5 text-blue-500 border-gray-300 rounded\"\n                type=\"checkbox\"\n                checked={todo.status === \"done\"}\n              />\n              <div className={`font-semibold text-lg ${todo.status === \"done\" ? \"line-through text-gray-400\" : \"text-gray-900\"}`}>\n                {todo.description}\n              </div>\n            </div>\n            <div className=\"mt-2 ml-8 text-gray-700 text-sm space-y-1\">\n              {/* Date, Who, Notes */}\n              <div>\n                <span className=\"font-semibold text-gray-900\">📅</span> {todo.due_date}\n              </div>\n              <div>\n                <span className=\"font-semibold text-gray-900\">👤</span> \n                {todo.who ? todo.who.join(\" \") : \"\"} {/* Add space between names */}\n              </div>\n              {todo.cc && (\n                <div>\n                  <span className=\"font-semibold text-gray-900\">📢 For Info:</span> {todo.cc ? todo.cc.split(\";\").join(\" \") : \"\"}\n                </div>\n              )}\n              {todo.notes && <div className=\"italic text-gray-600\">📝 {todo.notes}</div>}\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport SpecialWeekTodos from \"./SpecialWeekTodos\"; // Import the SpecialWeekTodos component\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div>\n      {/* Special Week Todos Component */}\n      <SpecialWeekTodos />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(<App />);\n"],"sourceRoot":""}