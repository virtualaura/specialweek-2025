{"version":3,"sources":["ScheduleDisplay.js","SpecialWeekTodos.js","App.js","index.js"],"names":["ScheduleDisplay","_ref","schedule","React","createElement","className","map","day","key","date","blocks","block","index","location","start","end","event","TodoList","tasks","setTasks","useState","filter","setFilter","setSchedule","useEffect","async","response","fetch","process","text","Papa","parse","header","skipEmptyLines","delimiter","complete","result","data","task","who","split","fetchTasks","formattedSchedule","reduce","acc","row","time","find","push","fetchSchedule","filteredTasks","includes","id","onClick","todo","disabled","type","checked","status","description","due_date","join","cc","notes","App","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.b98517cd.chunk.js","sourcesContent":["import React from \"react\";\n\nconst ScheduleDisplay = ({ schedule }) => {\n  return (\n    <div className=\"space-y-6\">\n      {schedule.map((day) => (\n        <div key={day.date} className=\"p-4 bg-gray-100 rounded-lg shadow-md\">\n          <h2 className=\"text-xl font-bold text-blue-700\">{day.date}</h2>\n          <ul className=\"mt-2 space-y-2\">\n            {day.blocks.map((block, index) => (\n              <li key={index} className={`p-3 border-l-4 rounded-md ${block.location === \"on-site\" ? \"border-blue-500 bg-white\" : \"border-green-500 bg-white\"}`}>\n                <span className=\"font-semibold\">{block.start} - {block.end}:</span> {block.event}\n                <span className=\"ml-2 text-xs px-2 py-1 rounded-full bg-gray-200\">{block.location}</span>\n              </li>\n            ))}\n          </ul>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ScheduleDisplay;\n","import React, { useState, useEffect } from \"react\";\nimport Papa from \"papaparse\";\nimport ScheduleDisplay from \"./ScheduleDisplay\"; // Import ScheduleDisplay\n\nexport default function TodoList() {\n  const [tasks, setTasks] = useState([]);\n  const [filter, setFilter] = useState(null);\n  const [schedule, setSchedule] = useState([]);  // Add state for schedule\n\n  // Fetch and parse tasks from CSV\n  useEffect(() => {\n    async function fetchTasks() {\n      const response = await fetch(process.env.PUBLIC_URL + \"/tasks.csv\");\n      const text = await response.text();\n      Papa.parse(text, {\n        header: true,\n        skipEmptyLines: true,\n        delimiter: \",\",\n        complete: (result) => {\n          setTasks(result.data.map(task => ({\n            ...task,\n            who: task.who.split(\";\")\n          })));\n        }\n      });\n    }\n    fetchTasks();\n  }, []);\n\n  // Fetch and parse schedule from CSV\n  useEffect(() => {\n    async function fetchSchedule() {\n      const response = await fetch(process.env.PUBLIC_URL + \"/schedule.csv\");\n      const text = await response.text();\n      Papa.parse(text, {\n        header: true,\n        skipEmptyLines: true,\n        delimiter: \",\",\n        complete: (result) => {\n          // Organize schedule data by day and blocks\n          const formattedSchedule = result.data.reduce((acc, row) => {\n            const { date, time, start, end, event, location } = row;\n\n            let day = acc.find((day) => day.date === date);\n            if (!day) {\n              day = { date, blocks: [] };\n              acc.push(day);\n            }\n\n            day.blocks.push({ time, start, end, event, location });\n            return acc;\n          }, []);\n\n          setSchedule(formattedSchedule);  // Update schedule state\n        }\n      });\n    }\n    fetchSchedule();\n  }, []);\n\n  const filteredTasks = filter ? tasks.filter(task => task.who.includes(filter)) : tasks;\n\n  return (\n    <div className=\"p-4 max-w-lg mx-auto\">\n      {/* Intro Text */}\n      <h1 className=\"text-xl font-bold mb-4\">Special Week 2025 - Plan and To-Dos</h1>\n      <h3>\n        Below please find details for Special Week 2025 planning. In the first block, you'll see the calendar for the week.\n        The second section has the to-dos that need to be completed for the week. By clicking on your name, you'll see the\n        information that is relevant for you - either because your feedback is needed, or on a FYI basis.\n      </h3>\n\n      {/* Display the calendar / schedule */}\n      <div id=\"schedule-block\" className=\"my-6\">\n        <ScheduleDisplay schedule={schedule} />\n      </div>\n\n      {/* To-Dos List */}\n      <div className=\"mb-4\">\n        <button className=\"mr-2 px-3 py-1 bg-blue-500 text-white rounded\" onClick={() => setFilter(null)}>All</button>\n        <button className=\"mr-2 px-3 py-1 bg-gray-500 text-white rounded\" onClick={() => setFilter(\"Kim\")}>Kim</button>\n        <button className=\"px-3 py-1 bg-gray-500 text-white rounded\" onClick={() => setFilter(\"Julia\")}>Julia</button>\n      </div>\n      \n      {/* Tasks Table */}\n      <ul className=\"list-none space-y-4\">\n        {filteredTasks.map((todo) => (\n          <li key={todo.id} className=\"p-4 bg-white shadow-md rounded-lg border border-gray-200\">\n            <div className=\"flex items-center\">\n              <input \n                disabled \n                className=\"mr-3 h-5 w-5 text-blue-500 border-gray-300 rounded\" \n                type=\"checkbox\" \n                checked={todo.status === \"done\"} \n              />\n              <div className={`font-semibold text-lg ${todo.status === \"done\" ? \"line-through text-gray-400\" : \"text-gray-900\"}`}>\n                {todo.description}\n              </div>\n            </div>\n            <div className=\"mt-2 ml-8 text-gray-700 text-sm space-y-1\">\n              <div><span className=\"font-semibold text-gray-900\">üìÖ Due Date:</span> {todo.due_date}</div>\n              <div><span className=\"font-semibold text-gray-900\">üë§ Who:</span> {todo.who ? todo.who.join(\", \") : \"\"}</div>\n              {todo.cc && <div><span className=\"font-semibold text-gray-900\">üì¢ For Info:</span> {todo.cc}</div>}\n              {todo.notes && <div className=\"italic text-gray-600\">üìù {todo.notes}</div>}\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport Papa from \"papaparse\";\nimport ScheduleDisplay from \"./ScheduleDisplay\";  // Separate component for displaying\nimport TodoList from \"./SpecialWeekTodos.js\";\nimport './App.css';\n\nconst App = () => {\n  const [schedule, setSchedule] = useState([]);\n  \n  // Fetch and parse schedule from CSV\n  useEffect(() => {\n    async function fetchSchedule() {\n      const response = await fetch(process.env.PUBLIC_URL + \"/schedule.csv\");\n      const text = await response.text();\n      \n      Papa.parse(text, {\n        header: true,\n        skipEmptyLines: true,\n        delimiter: \",\",\n        complete: (result) => {\n          const formattedSchedule = result.data.reduce((acc, row) => {\n            const { date, time, start, end, event, location } = row;\n            \n            // Find the day in the accumulator or create a new day if not found\n            let day = acc.find((day) => day.date === date);\n            if (!day) {\n              day = { date, blocks: [] };\n              acc.push(day);\n            }\n            \n            // Add the block with the correct format\n            day.blocks.push({ time, start, end, event, location });\n            return acc;\n          }, []);\n          \n          setSchedule(formattedSchedule);  // Set the formatted schedule state\n        }\n      });\n    }\n\n    fetchSchedule();\n  }, []);\n\n  return (\n    <div>\n      <h1>Welcome to the Event Schedule</h1>\n\n      {/* Schedule Display Block */}\n      <div id=\"schedule-block\" className=\"my-6\">\n        <ScheduleDisplay schedule={schedule} />\n      </div>\n\n      {/* Todo List Block */}\n      <div className=\"my-6\">\n        <TodoList /> {/* Displaying the TodoList component */}\n      </div>\n    </div>\n  );\n};\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(<App />);\n"],"sourceRoot":""}